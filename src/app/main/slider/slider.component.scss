@use "sass:math";

.fnc {
  // main variables, basically everything depends on $slidingAT
  $slidingAT: 1s;
  $slidingDelay: math.div($slidingAT, 3) * 2;
  $maskAT: math.div($slidingAT * 0.7, 1);
  $headingAT: math.div($slidingAT * 1.5, 1);
  $controlAT: math.div($slidingAT, 2);
  $easing: ease-in-out;
  $blendMode: luminosity;

  $contentLeft: 40%;
  $contentTop: 40%;

  $headingPadding: 30px;
  $headingFontSize: 100px;

  $maskTop: 15%;
  $maskRight: 100% - $contentLeft;
  $maskHeight: 67vh;
  $maskWidth: math.div($maskHeight, 1.35);

  $black: #1f2833;

  /* you can add color names and their values here
    and then simply add classes like .m--blend-$colorName to .fnc-slide 
    to apply specific color for mask blend mode */
  $bgColors: (
    dark: lighten(#6a0a0d, 10%),
    green: #287445,
    red: lighten(#a8a825, 20%),
    blue: rgb(20, 86, 110),
  );

  &-slider {
    overflow: hidden;
    box-sizing: border-box;
    position: relative;
    height: 100vh;

    *,
    *:before,
    *:after {
      box-sizing: border-box;
    }

    &__slides {
      position: relative;
      height: 100%;
      transition: transform $slidingAT $slidingDelay;
    }

    // iterate through color map and set colors for specific classes
    @each $colorTheme, $bgColor in $bgColors {
      .m--blend-#{"#{$colorTheme}"} {
        .fnc-slide__inner {
          background-color: lighten($bgColor, 20%);
        }

        .fnc-slide__mask-inner {
          background-color: $bgColor;
        }
      }

      .m--navbg-#{"#{$colorTheme}"} {
        background-color: $bgColor;
      }
    }
  }

  &-slide {
    overflow: hidden;
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    transform: translate3d(0, 0, 0);

    &.m--before-sliding {
      z-index: 2 !important;
      transform: translate3d(100%, 0, 0);
    }

    &.m--active-slide {
      z-index: 1;
      transition: transform $slidingAT $slidingDelay $easing;
      transform: translate3d(0, 0, 0);
    }

    &__inner {
      position: relative;
      height: 100%;
      background-size: cover;
      background-position: center top;
      background-repeat: no-repeat;
      transform: translate3d(0, 0, 0);

      .m--global-blending-active &,
      .m--blend-bg-active & {
        background-blend-mode: $blendMode;
      }

      .m--before-sliding & {
        transform: translate3d(-100%, 0, 0);
      }

      .m--active-slide & {
        transition: transform $slidingAT $slidingDelay $easing;
        transform: translate3d(0, 0, 0);
      }
    }

    &__mask {
      $activeDelay: $slidingAT + math.div($slidingDelay, 3);
      $xOffset: 200px;
      $yOffset: 0;
      $deg: 10deg;

      overflow: hidden;
      z-index: 1;
      position: absolute;
      right: $maskRight;
      top: $maskTop;
      width: $maskWidth;
      height: $maskHeight;
      margin-right: $headingPadding * -3;
      // This line basically does all magic with masking effect. Very simple and elegant. Webkit only atm.
      clip-path: polygon(
        0 0,
        100% 0,
        100% 100%,
        0 100%,
        0 0,
        6vh 0,
        6vh 61vh,
        44vh 61vh,
        44vh 6vh,
        6vh 6vh
      );
      transform-origin: 50% 0;
      transition-timing-function: $easing;

      .m--before-sliding & {
        transform: rotate($deg * -1) translate3d($xOffset, 0, 0);
        opacity: 0;
      }

      .m--active-slide & {
        transition: transform $maskAT $activeDelay,
          opacity math.div($maskAT, 2) $activeDelay;
        transform: translate3d(0, 0, 0);
        opacity: 1;
      }

      .m--previous-slide & {
        transition: transform $maskAT math.div($slidingDelay, 2),
          opacity math.div($maskAT, 2) math.div($maskAT, 2) +
            math.div($slidingDelay, 2);
        transform: rotate($deg) translate3d($xOffset * -1, 0, 0);
        opacity: 0;
      }

      &-inner {
        z-index: -1;
        position: absolute;
        left: 50%;
        top: 50%;
        width: 100vw;
        height: 100vh;
        margin-left: -50vw;
        margin-top: -50vh;
        background-size: cover;
        background-position: center center;
        background-blend-mode: $blendMode;
        transform-origin: calc((100vh - $maskHeight) / 2);
        transition-timing-function: $easing;

        .m--before-sliding & {
          transform: translateY($yOffset) rotate($deg) translateX($xOffset * -1)
            translateZ(0);
        }

        .m--active-slide & {
          transition: transform $maskAT $activeDelay;
          transform: translateX(0);
        }

        .m--previous-slide & {
          transition: transform $maskAT math.div($slidingDelay, 2);
          transform: translateY($yOffset) rotate($deg * -1) translateX($xOffset)
            translateZ(0);
        }
      }
    }

    &__content {
      z-index: 2;
      position: absolute;
      left: $contentLeft;
      top: $contentTop;
    }

    &__heading {
      margin-bottom: 10px;
      text-transform: uppercase;

      &-line {
        overflow: hidden;
        position: relative;
        padding-right: 20px;
        font-size: $headingFontSize;
        color: #fff;
        word-spacing: 10px;

        &:nth-child(2) {
          padding-left: $headingPadding;
        }

        .m--before-sliding & {
          transform: translateY(100%);
        }

        .m--active-slide & {
          transition: transform $headingAT math.div($slidingDelay, 1.5);
          transform: translateY(0);
        }

        .m--previous-slide & {
          transition: transform $headingAT;
          transform: translateY(-100%);
        }

        span {
          display: block;

          .m--before-sliding & {
            transform: translateY(-100%);
          }

          .m--active-slide & {
            transition: transform $headingAT math.div($slidingDelay, 1.5);
            transform: translateY(0);
          }

          .m--previous-slide & {
            transition: transform $headingAT;
            transform: translateY(100%);
          }
        }
      }
    }

    &__action-btn {
      $hoverAT: 0.3s;
      $fontSize: 20px;
      $vertPadding: 5px;
      $lineHeight: $fontSize + $vertPadding * 2;

      position: relative;
      margin-left: 200px;
      padding: $vertPadding 15px;
      font-size: $fontSize;
      line-height: 1;
      color: transparent;
      border: none;
      text-transform: uppercase;
      background: transparent;
      cursor: pointer;
      text-align: center;
      outline: none;

      span {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        perspective: 1000px;
        transform-style: preserve-3d;
        transition: transform $hoverAT;
        transform-origin: 50% 0;
        line-height: $lineHeight;
        color: #fff;

        &:before {
          content: "";
          position: absolute;
          left: 0;
          top: 0;
          width: 100%;
          height: 100%;
          border: 2px solid #fff;
          border-top: none;
          border-bottom: none;
        }

        &:after {
          content: attr(data-text);
          position: absolute;
          left: 0;
          top: 0;
          width: 100%;
          height: 100%;
          line-height: $lineHeight;
          background: $black;
          opacity: 0;
          transform-origin: 50% 0;
          transform: translateY(100%) rotateX(-90deg);
          transition: opacity math.div($hoverAT, 2) math.div($hoverAT, 2);
        }
      }

      &:hover span {
        transform: rotateX(90deg);

        &:after {
          opacity: 1;
          transition: opacity math.div($hoverAT, 2);
        }
      }
    }
  }

  &-nav {
    z-index: 5;
    position: absolute;
    right: 0;
    bottom: 0;

    &__bgs {
      z-index: -1;
      overflow: hidden;
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
    }

    &__bg {
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;

      &.m--nav-bg-before {
        z-index: 2 !important;
        transform: translateX(100%);
      }

      &.m--active-nav-bg {
        z-index: 1;
        transition: transform $slidingAT $slidingDelay;
        transform: translateX(0);
      }
    }

    &__controls {
      font-size: 0;
    }

    &__control {
      $controlWidth: 100px;

      overflow: hidden;
      position: relative;
      display: inline-block;
      vertical-align: top;
      width: $controlWidth;
      height: 50px;
      font-size: 14px;
      color: #fff;
      text-transform: uppercase;
      background: transparent;
      border: none;
      outline: none;
      cursor: pointer;
      transition: background-color $controlAT;

      &.m--active-control {
        background: $black;
      }

      &-progress {
        position: absolute;
        left: 0;
        bottom: 0;
        width: 100%;
        height: 2px;
        background: #fff;
        transform-origin: 0 50%;
        transform: scaleX(0);
        transition-timing-function: linear !important;

        .m--with-autosliding .m--active-control & {
          transform: scaleX(1);
        }

        .m--prev-control & {
          transform: translateX(100%);
          transition: transform 0.5s !important;
        }

        .m--reset-progress & {
          transform: scaleX(0);
          transition: transform 0s 0s !important;
        }

        .m--autosliding-blocked & {
          transition: all 0s 0s !important;
          transform: scaleX(0) !important;
        }
      }
    }
  }
}

/* NOT PART OF COMMON SLIDER STYLES */
$font: "Open Sans", Helvetica, Arial, sans-serif;
$creditsAT: 0.7s;
$creditsWidth: 400px;

body {
  margin: 0;
}

.demo-cont {
  overflow: hidden;
  position: relative;
  height: 100vh;
  perspective: 1500px;
  background: #000;

  &__credits {
    box-sizing: border-box;
    overflow-y: auto;
    z-index: 1;
    position: absolute;
    right: 0;
    top: 0;
    width: 100%;
    max-width: 520px;
    height: 100%;
    padding: 20px;
    background: #36454f;
    font-family: $font;
    color: #fff;
    text-align: center;
    transition: transform $creditsAT;
    transform: translate3d(100%, 0, 0) rotateY(-45deg);
    will-change: transform;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: left;
    gap: 20px;
    overflow: hidden;
    .credits-active & {
      transition: transform $creditsAT math.div($creditsAT, 3);
      transform: translate3d(0, 0, 0);
    }

    *,
    *:before,
    *:after {
      box-sizing: border-box;
    }

    &-close {
      position: absolute;
      right: 20px;
      top: 20px;
      width: 28px;
      height: 28px;
      cursor: pointer;

      &:before,
      &:after {
        content: "";
        position: absolute;
        left: 0;
        top: 50%;
        width: 100%;
        height: 2px;
        margin-top: -1px;
        background: #fff;
      }
      &:before {
        transform: rotate(45deg);
      }
      &:after {
        transform: rotate(-45deg);
      }
    }

    &-heading {
      text-transform: uppercase;
      font-size: 40px;
      margin-bottom: 20px;
    }

    &-img {
      display: block;
      width: 60%;
      margin: 0 auto 30px;
      border-radius: 10px;
    }

    &-name {
      margin-bottom: 20px;
      font-size: 30px;
    }

    &-link {
      display: block;
      margin-bottom: 10px;
      font-size: 24px;
      color: #fff;
    }

    &-blend {
      font-size: 30px;
      margin-bottom: 10px;
    }
  }
}

.example-slider {
  z-index: 2;
  transform: translate3d(0, 0, 0);
  transition: transform $creditsAT;

  .credits-active & {
    transform: translate3d($creditsWidth * -1, 0, 0) rotateY(10deg) scale(0.9);
  }

  .fnc-slide {
    &-1 {
      .fnc-slide__inner,
      .fnc-slide__mask-inner {
        background-image: url("/assets/images/regular2.jpg");
      }
    }
    &-2 {
      .fnc-slide__inner,
      .fnc-slide__mask-inner {
        background-image: url("/assets/images/deep2.jpg");
      }
    }
    &-3 {
      .fnc-slide__inner,
      .fnc-slide__mask-inner {
        background-image: url("/assets/images/moveIn2.jpg");
      }

      .fnc-slide__inner:before {
        content: "";
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.1);
      }
    }
    &-4 {
      .fnc-slide__inner,
      .fnc-slide__mask-inner {
        background-image: url("/assets/images/moveOut.jpg");
      }

      .fnc-slide__inner:before {
        content: "";
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.2);
      }
    }
  }

  .fnc-slide__heading {
    cursor: pointer;
  }
}

/* COLORFUL SWITCH STYLES 
     ORIGINAL DEMO - https://codepen.io/suez/pen/WQjwOb */
$w: 180px;
$_baseW: 280;
$h: math.div($w * 120, $_baseW);
$br: math.div($w * 50, $_baseW);
$outerOffset: 5px;
$animTime: 0.5s;
$dotS: math.div($w * 8, $_baseW);
$dotLeft: math.div($w * 204, $_baseW);
$dotLeftOffset: math.div($w * -125, $_baseW);
$offS: math.div($w * 64, $_baseW);
$onLeft: math.div($w * 162, $_baseW);
$onTop: math.div($w * 35, $_baseW);
$onWidth: math.div($w * 30, $_baseW);
$onHeight: math.div($w * 56, $_baseW);
$cubIn: cubic-bezier(0.52, -0.96, 0.51, 1.28);
$cubOut: cubic-bezier(0.67, -0.16, 0.47, 1.61);

@mixin switchOn() {
  .colorful-switch__checkbox:checked ~ .colorful-switch__label & {
    @content;
  }
}

.colorful-switch {
  position: relative;
  width: $w;
  height: $h;
  margin: 0 auto;
  border-radius: $br;
  background: #cfcfcf;

  &:before {
    content: "";
    z-index: -1;
    position: absolute;
    left: -$outerOffset;
    top: -$outerOffset;
    width: $w + $outerOffset * 2;
    height: $h + $outerOffset * 2;
    border-radius: $br + $outerOffset;
    background: #314239;
    transition: background-color 0.3s;
  }

  &:hover:before {
    background: #4c735f;
  }

  &__checkbox {
    z-index: -10;
    position: absolute;
    left: 0;
    top: 0;
    opacity: 0;
  }

  &__label {
    z-index: 1;
    overflow: hidden;
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    border-radius: $br;
    cursor: pointer;
  }

  &__bg {
    position: absolute;
    left: 0;
    top: 0;
    width: math.div($w * 3, 1);
    height: 100%;
    background: linear-gradient(
      90deg,
      #14dcd6 0,
      #10e7bd $w,
      #ef9c29 math.div($w * 2, 1),
      #e76339 100%
    );
    transition: transform $animTime;
    transform: translate3d(math.div($w * -2, 1), 0, 0);

    @include switchOn {
      transform: translate3d(0, 0, 0);
    }
  }

  &__dot {
    position: absolute;
    left: $dotLeft;
    top: 50%;
    width: $dotS;
    height: $dotS;
    margin-left: math.div($dotS, -2);
    margin-top: math.div($dotS, -2);
    border-radius: 50%;
    background: #fff;
    transition: transform $animTime;
    transform: translate3d(0, 0, 0);

    @include switchOn {
      transform: translate3d($dotLeftOffset, 0, 0);
    }
  }

  &__on {
    position: absolute;
    left: $onLeft;
    top: $onTop;
    width: $onWidth;
    height: $onHeight;
    transition: transform $animTime;
    transform: translate3d(0, 0, 0);

    @include switchOn {
      transform: translate3d($dotLeftOffset, 0, 0);
    }

    &__inner {
      position: absolute;
      width: 100%;
      height: 100%;
      transition: transform math.div($animTime, 2) 0s $cubIn;
      transform-origin: 100% 50%;
      transform: rotate(45deg) scale(0) translateZ(0);

      @include switchOn {
        transition: transform math.div($animTime, 2) math.div($animTime, 2)
          $cubOut;
        transform: rotate(45deg) scale(1) translateZ(0);
      }

      &:before,
      &:after {
        content: "";
        position: absolute;
        border-radius: math.div($dotS, 2);
        background: #fff;
      }
      &:before {
        left: 0;
        bottom: 0;
        width: 100%;
        height: math.div($dotS + 1, 1);
      }
      &:after {
        right: 0;
        top: 0;
        width: math.div($dotS + 1, 1);
        height: 100%;
      }
    }
  }

  &__off {
    position: absolute;
    left: $dotLeft;
    top: 50%;
    width: $offS;
    height: $offS;
    margin-left: math.div($offS, -2);
    margin-top: math.div($offS, -2);
    transition: transform $animTime;
    transform: translate3d(0, 0, 0);

    @include switchOn {
      transform: translate3d($dotLeftOffset, 0, 0);
    }

    &:before,
    &:after {
      content: "";
      position: absolute;
      left: 0;
      top: 50%;
      width: 100%;
      height: $dotS;
      margin-top: math.div($dotS, -2);
      border-radius: math.div($dotS, 2);
      background: #fff;
      transition: transform math.div($animTime, 2) math.div($animTime, 2);

      @include switchOn {
        transition-delay: 0s;
      }
    }
    &:before {
      transform: rotate(45deg) scaleX(1) translateZ(0);

      @include switchOn {
        transform: rotate(45deg) scaleX(0) translateZ(0);
      }
    }
    &:after {
      transition-timing-function: $cubOut;
      transform: rotate(-45deg) scaleX(1) translateZ(0);

      @include switchOn {
        transition-timing-function: ease;
        transform: rotate(-45deg) scaleX(0) translateZ(0);
      }
    }
  }
}

.demo-cont__credits {
  .cardHeads {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    width: 100%;

    button {
      border: none;
      background: none;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
    }
  }
  .blob-btn i {
    display: none;
  }

  .blob-btn:hover i {
    display: inline;
  }

  li {
    padding-left: 10px;
  }
  h4 {
    padding: 0 10px;
  }

  h3 {
    font-size: 2rem;
    padding: 5px 10px;
    border: 1px solid #fff;
    border-width: 2px;
    border-radius: 8px;
  }

  b {
    color: #00f2f7;
  }
  ul li {
    list-style-position: inside;
  }
}

$cyan: #0fe0f5;
$dark: #222;
$borderW: 5px;

.blob-btn {
  $numOfBlobs: 4;
  z-index: 1;
  position: relative;
  padding: 15px 40px;
  text-align: center;
  text-transform: uppercase;
  color: $cyan;
  font-size: 16px;
  font-weight: bold;
  background-color: transparent;
  outline: none;
  border: none;
  transition: color 0.5s;
  cursor: pointer;

  &:before {
    content: "";
    z-index: 1;
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    border: $borderW solid $cyan;
    box-sizing: border-box;
    border-radius: 20px;
  }

  &:after {
    content: "";
    z-index: -2;
    position: absolute;
    left: $borderW * 1.5;
    top: $borderW * 1.5;
    width: 100%;
    height: 100%;
    border: $borderW solid $dark;
    transition: all 0.3s 0.2s;
    box-sizing: border-box;
    border-radius: 20px;
  }

  &:hover {
    color: $dark;

    &:after {
      transition: all 0.3s;
      left: 0;
      top: 0;
    }
  }

  &__inner {
    z-index: -1;
    overflow: hidden;
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    border-radius: 20px;
  }

  // additional container created, because in FF blobs are breaking overflow:hidden of element with svg gooey filter
  &__blobs {
    position: relative;
    display: block;
    height: 100%;
    filter: url("#goo");
  }

  &__blob {
    position: absolute;
    top: $borderW;
    width: calc(120% / $numOfBlobs);
    height: 100%;
    background: $cyan;
    border-radius: 100%;
    transform: translate3d(0, 150%, 0) scale(1.7);
    transition: transform 0.45s;

    @supports (filter: url("#goo")) {
      transform: translate3d(0, 150%, 0) scale(1.4);
    }

    @for $i from 1 through $numOfBlobs {
      &:nth-child(#{$i}) {
        left: ($i - 1) * (calc(120% / $numOfBlobs));
        transition-delay: ($i - 1) * 0.08s;
      }
    }

    .blob-btn:hover & {
      transform: translateZ(0) scale(1.7);

      @supports (filter: url("#goo")) {
        transform: translateZ(0) scale(1.4);
      }
    }
  }
}

.moveIn {
  h2,
  b {
    color: #ffff33;
  }
  h3 {
    border-color: #ffff33;
  }
  .blob-btn {
    color: #ffff33;
    &:before {
      border: $borderW solid #ffff33;
    }
    &:after {
      border: $borderW solid $dark;
    }
    &:hover {
      color: $dark;
    }
    &__blob {
      background: #ffff33;
    }
  }
}

.regularCleaning {
  h2,
  b {
    color: #32cd32;
  }
  h3 {
    border-color: #32cd32;
  }
  .blob-btn {
    color: #32cd32;
    &:before {
      border: $borderW solid #32cd32;
    }
    &:after {
      border: $borderW solid $dark;
    }
    &:hover {
      color: $dark;
    }
    &__blob {
      background: #32cd32;
    }
  }
}

.deepCleaning {
  h2,
  b {
    color: #ff073a;
  }
  h3 {
    border-color: #ff073a;
  }
  .blob-btn {
    color: #ff073a;
    &:before {
      border: $borderW solid #ff073a;
    }
    &:after {
      border: $borderW solid $dark;
    }
    &:hover {
      color: $dark;
    }
    &__blob {
      background: #ff073a;
    }
  }
}

.moveOut {
  h2,
  b {
    color: #0fe0f5;
  }
  h3 {
    border-color: #0fe0f5;
  }
  .blob-btn {
    color: #0fe0f5;
    &:before {
      border: $borderW solid #0fe0f5;
    }
    &:after {
      border: $borderW solid $dark;
    }
    &:hover {
      color: $dark;
    }
    &__blob {
      background: #0fe0f5;
    }
  }
}
